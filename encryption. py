from cryptography.fernet import Fernet
import os
import json
from datetime import datetime

class EncryptedNotesApp:
    def __init__(self):
        self.notes_file = "encrypted_notes.json"
        self.key_file = "secret.key"
        self.load_or_create_key()

    def load_or_create_key(self):
      
        if not os.path.exists(self.key_file):
            key = Fernet.generate_key()
            with open(self.key_file, 'wb') as key_file:
                key_file.write(key)
        else:
            with open(self.key_file, 'rb') as key_file:
                key = key_file.read()
        self.cipher = Fernet(key)

    def encrypt_note(self, text):
       
        return self.cipher.encrypt(text.encode()).decode()

    def decrypt_note(self, encrypted_text):
      
        return self.cipher.decrypt(encrypted_text.encode()).decode()

    def add_note(self):
       
       
        print("\nAdd New Note")
        title = input("Title: ")
        content = input("Content: ")
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        note = {
            'title': title,
            'content': self.encrypt_note(content),
            'timestamp': timestamp
        }
        
        notes = self.load_notes()
        notes.append(note)
        self.save_notes(notes)
        print("Note saved successfully!")

    def view_notes(self):
       
       
        notes = self.load_notes()
        if not notes:
            print("\nNo notes found.")
            return
            
        print("\n Your Notes:")
        for idx, note in enumerate(notes, 1):
            try:
                decrypted_content = self.decrypt_note(note['content'])
                print(f"\n{idx}. {note['title']}")
                print(f"   {decrypted_content}")
                print(f"    {note['timestamp']}")
            except:
                print(f"\n{idx}. [Error decrypting this note]")

    def load_notes(self):
       
        if not os.path.exists(self.notes_file):
            return []
        with open(self.notes_file, 'r') as file:
            try:
                return json.load(file)
            except json.JSONDecodeError:
                return []

    def save_notes(self, notes):
        """Save notes to file"""
        with open(self.notes_file, 'w') as file:
            json.dump(notes, file, indent=2)

    def run(self):
       
       
        while True:
            print("\nEncrypted Notes CLI")
            print("1. Add Note")
            print("2. View Notes")
            print("3. Exit")
            
            choice = input("Choose an option (1-3): ")
            
            if choice == '1':
                self.add_note()
            elif choice == '2':
                self.view_notes()
            elif choice == '3':
                print("Goodbye! ")
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    app = EncryptedNotesApp()
    app.run()
